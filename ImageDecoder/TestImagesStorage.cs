using System.Drawing;

namespace ImageDecoder
{
    static class TestImagesStorage
    {
        internal static Bitmap DecodeImage(int[][] encodedImage)
        {
            
            var width = encodedImage.Length;
            var height = encodedImage[0].Length;
            var scale = 2;
            if (width <= 16)
                scale = 16;
            else if (width <= 8)
                scale = 32;

            var result = new Bitmap(width * scale, height * scale);
            for (int y = 0; y < height; y++)
            {
                for (int x = 0; x < width; x++)
                {
                    var colorInt = encodedImage[y][x];
                    var colorLong = ColorCutter.ExpandColor(colorInt);
                    Color color = Color.FromArgb(colorLong);
                    color = Color.FromArgb(255, color);
                    PasteColorToScale(x, y, scale, color, result);
                }
            }
            return result;
        }

        internal static Bitmap GetMarioImage()
        {
            var scale = 32;
            var width = marioPixels.Length;
            var height = marioPixels[0].Length;
            var result = new Bitmap(width * scale, height * scale);
            for (int y = 0; y < height; y++)
            {
                for (int x = 0; x < width; x++)
                {
                    var colorInt = marioPixels[x][y];
                    var colorLong = ColorCutter.ExpandColor(colorInt);
                    Color color = Color.FromArgb(colorLong);
                    color = Color.FromArgb(255, color);
                    PasteColorToScale(x, y, scale, color, result);
                }
            }
            return result;
        }

        private static void PasteColorToScale(int coordX, int coordY, int scale, Color color, Bitmap bitmap)
        {
            var xFrom = coordX * scale;
            var xTo = (coordX + 1) * scale;
            var yFrom = coordY * scale;
            var yTo = (coordY + 1) * scale;
            for (int y = yFrom; y < yTo; y++)
            {
                for (int x = xFrom; x < xTo; x++)
                {
                    bitmap.SetPixel(x, y, color);
                }
            }
        }


        private static readonly int[][] marioPixels = new int[16][]
        {
          new int[]{0x0000, 0x0000, 0x0000, 0x0000, 0x3000, 0xF000, 0xF800, 0xF800, 0xF800, 0xF000, 0x3000, 0x3000, 0x3000, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x40A0, 0xE003, 0xF001, 0xF000, 0xF960, 0xF960, 0xF001, 0xF960, 0xF000, 0xF000, 0x5960, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x0000, 0x61A0, 0x5960, 0x7200, 0xFE60, 0xF660, 0x3980, 0xE603, 0x6280, 0x5A60, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x5960, 0xE603, 0x61A0, 0xE603, 0xFEA0, 0xFE80, 0x39A0, 0xE603, 0xFEA0, 0xFE80, 0x7B40, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x5960, 0xE603, 0x7200, 0x7220, 0xFE80, 0xFEA0, 0xE603, 0x5A60, 0xE603, 0xF660, 0xFE80, 0x39A0, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x3000, 0x7200, 0xE603, 0xF660, 0xFEA0, 0xFE80, 0x5A60, 0x3160, 0x39A0, 0x39A0, 0x5A60, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF660, 0xFE40, 0xF660, 0xFE40, 0xF660, 0xF660, 0xE603, 0x39A0, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x40A0, 0xF000, 0xF8E0, 0xF000, 0x119D, 0xF000, 0xF000, 0x3160, 0x3160, 0x0000, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x6120, 0xF800, 0xF800, 0xF800, 0xF000, 0x08FE, 0x119D, 0xF000, 0xE003, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x6120, 0xF800, 0xF800, 0xF001, 0x28DA, 0x093E, 0xD6C5, 0x18DC, 0x18DC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x5960, 0xF001, 0xF800, 0xF800, 0xE063, 0x117D, 0x095E, 0x00FF, 0x08FE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x28DA, 0xE003, 0xF840, 0xFE00, 0xE603, 0x093E, 0x00FF, 0x18DC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x0000, 0x28DA, 0xE063, 0xF660, 0xE603, 0x093E, 0x08FE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x0000, 0x28DA, 0x18DC, 0x19DC, 0x19DC, 0x113D, 0x18DC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x0000, 0x40A0, 0x48C0, 0x48C0, 0x38A0, 0x38A0, 0x38A0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
          new int[]{0x0000, 0x0000, 0x0000, 0x0000, 0x40A0, 0x48C0, 0x48C0, 0x48C0, 0x38A0, 0x38A0, 0x38A0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },
        };
    }
}
